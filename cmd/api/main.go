// @title           Fiber Ecommerce API
// @version         1.0
// @description     API for ecommerce platform
// @termsOfService 	http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.swagger.io/support
// @contact.email	 support@swagger.io

// @license.name   Apache 2.0
// @license.url    http://www.apache.org/licenses/LICENSE-2.0.html

// @host           localhost:3000
// @BasePath  /
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description     Type "Bearer" followed by a space and JWT token.
package main

import (
	"log"

	_ "github.com/Sup-Film/fiber-ecommerce-api/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/Sup-Film/fiber-ecommerce-api/internal/adapters/http/handlers"
	"github.com/Sup-Film/fiber-ecommerce-api/internal/adapters/http/routes"
	"github.com/Sup-Film/fiber-ecommerce-api/internal/adapters/persistence/repositories"
	"github.com/Sup-Film/fiber-ecommerce-api/internal/config"
	"github.com/Sup-Film/fiber-ecommerce-api/internal/core/services"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/logger"
)

func main() {
	// Load Config
	cfg, err := config.LoadConfig()
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("App Environment: %s\n", cfg.APPEnv)

	// Setup Database
	db := config.SetupDatabase(cfg)

	// เริ่มต้นตั่งค่า Repositories
	userRepo := repositories.NewUserRepository(db)

	// เริ่มต้นตั่งค่า Services
	authService := services.NewAuthService(userRepo)

	// เริ่มต้นตั่งค่า Handlers
	authHandler := handlers.NewAuthHandler(authService)

	// สร้างแอปพลิเคชัน Fiber
	app := fiber.New(fiber.Config{
		ErrorHandler: func(c *fiber.Ctx, err error) error {
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
				"error": err.Error(),
			})
		},
	})

	// Middleware
	app.Use(logger.New())
	app.Use(cors.New())

	// Setup Routes
	routes.SetupRoutes(app, authHandler)

	// Start the server
	if err := app.Listen(":3000"); err != nil {
		log.Fatalf("Error starting server: %v\n", err)
	}
	log.Printf("Server is running on port: %s\n", cfg.APPPort)
}
